# Spatially organised pools and connections
# what_where network with COMMENTS
#
# This network lives in a world that has 6 locations, arranged as a 3x2 grid. 
# In the diagram below, O = an activated unit; • = an inactive unit. Units in the feature maps represent the presence of a feature in a specific location. The diagram is an example where there is meant to a red blob at location 1,1 and a blue blob at location 2,2. This imput would be represented by external activation to the feature maps. Note the grid references use the R standard of [row,column] (as opposed to X,Y)
# The network consists of a set of feature maps (one map for red and one for blue features), a set of feature detectors (WHAT) that indicate the presence of a feature somewhere in the world, and a salience map (WHERE) that indicates the location of objects.
#
#       Feature maps (3x2)
#       red map   blue map
#       | O • |   | • • |   something red at 1,1
#       | • • |   | • O |    and blue at 2,2
#       | • • |.  | • • |
#
#                          | O • |
#   red  O                 | • O |
#   blue O                 | • • |
# 
#    WHAT                   WHERE
# Feature ID (2 units)      Salience map (3x2)
# -- red and blue are       -- Objects present at both
#    both active                 locations [1,1] and [2,2]
# 
#' Another way to think of it.. units in the feature ID pool (WHAT) represent 
#' the presence of a feature, but not its location. The grid of units in the 
#' salience map (WHERE) represent activated locations, but give no information 
#' about feature ID. A unit in the feature maps specifies BOTH the location 
#' and identity of a feature. 
#
# To create this network, we specify three pools of units:
#
pools: [
 {name: feature_ID, shape: 2, unitnames: [red, blue]},
 {name: salience_map, shape: [3,2], prefix: s_},
 {name: feature_maps, shape: [2,3,2], prefix: fm_, 
   basenames: [[red_, blue_], [1,2,3], [1,2]]}
]
# What these pools represent:
# feature_ID is a pool of two units, which will represent the presence of red and blue 
# salience is a 2D grid of shape 3x2. Activation in the salience map indicates there is an object in the visual world, of some kind, at the corresponding location/s. For example, there is a unit representing world location [1,1]; another representing world location [2,1] and so on, for all 6 world locations.
# feature_maps is a stack of 2D grids, each with shape 3x2. There is a separate map for each feature (red and blue). For example, feature_maps[2,3,2] represents the activation of the second feature (blue) at world location [3,2]
#
# Finally, note the use of basenames and prefixes here produces unitnames as follows:
# feature_IDs: red,blue
# salience_map: s_11, s_21, s_31, s_12, s_22, s_32
# feature_maps:  fm_red_11, fm_blue_11, fm_red_21, fm_blue_21, fm_red_31, fm_blue_31, 
#                fm_red_12, fm_blue_12, fm_red_22, fm_blue_22, fm_red_32, fm_blue_32
# The use of the pool shape as basenames for the units is almost a topic in itself. So not covering that now.
#
# Connections:
# The new addition with spatially organised pools is the use of from_dims and to_dims. These properties specify how units in the from and to pools correspond with one another. 
#
# Imagine the 3x2 grid below represents the activations of the units in the salience pool (again using the R standard [row,col] notation): salience[3,1] = 1; salience[2,2] = 1.5)
#   1 2
# 1 0 0
# 2 0 1.5
# 3 1 0
# This makes it easy to see that the values for the first dimension of this pool run from 1 to 3, representing the row coordinates of the grid, and the second dimension goes from 1 to 2, representing the column coordinates.

# The feature_maps pool is a 3D structure, a stack of 3x2 grids. Here's an example set of activations. 

# [1, ]         [2, ]
#   1 2           1 2
# 1 0 0         1 0 0
# 2 0 0         2 0 1
# 3 1 0         3 0 0
# The values for the first dimension of feature_maps runs from 1 to 2, representing the two features red and blue. The values for the second dimension run from 1 to 3, representing the row coordinates of the grids, and the third dimension from 1 to 2, representing the column coordinates. 
# Hopefully what this makes clear is that the second and third dimensions of the feature_maps pool (ie row and column coordinates) correspond to the first and second dimensions of the salience map (which are also row and column coordinates). 
# The first dimension of the feature_maps pool (red=1, blue=2) corresponds to the first and only dimension of the feature_ID pool (again red=1 and blue=2).
# If we keep these corresponding dimensions of the different pools in mind, we can easily specify the connections between them, as shown below.
connections: [
 {from: feature_maps, to: salience_map, weight: 1,
  from_dims: [2,3], to_dims: [1,2]},
#   The new addition above is the use of from_dims and to_dims. These properties specify the corresponding dimensions of the two pools. If two units have the same values on the corresponding dimnesions, they will be connected with a weight of 1.
# For example, feature_maps[1,3,2] and salience[3,2] have the same value on the row and column coordinates (that is, the second and third dimension of feature maps, and the first and second dimension of salience). So these two units get connected with a weight of 1. Likewise feature_maps[2,1,2] and salience [1,2] get connected. 
# The one command above is completely equivalent to:
#   {from: fr11, to: s11, weight: 1},
#   {from: fb11, to: s11, weight: 1},
#   {from: fr21, to: s21, weight: 1},
# ... omitting 8 other rows ....
#   {from: fb32, to: s32 ,weight: 1}
# But rather than make 12 statements like this, it's just one. Furthermore, if there is a change in the size of the world grid from 3x2 to 5x5, or from 2 feature maps to 4, the statement using from_dims and to_dims remains the same. Without this feature, if we had a 5x5 grid and 4 features, we would have to manually specify 100 connections!!!
# 
# The next line specifies the connections between feature_IDs and feature_maps. As discussed above, the correspondence here is on the first dimension of both pools (and the only dimension of feature_ID pool)
 {from: feature_maps, to: feature_ID, weight: 1,
  from_dims: 1, to_dims: 1},
# In this case, from_dims is 1 meaning the connections are based on the first dimension of the from pool, feature_maps. This dimension refers to whether the map is for red or blue. Every unit in a feature map is connected to the corresponding featureID, eg all units in the red feature map are connected to the red ID.
# Within-pool inhibition will be specified so that every unit inhibits every other unit in the pool. 
 {from: feature_maps, to: feature_maps, weight: -1, directives: others},
 {from: feature_ID, to: feature_ID, weight: -1, directives: others},
# However, within-pool inhibition can also be done in a spatially-organsised way, again using from_dims and to_dims. For example, suppose we wanted units in the salience map to inhibit nearby locations but not more distant ones. This can be done by passing a list of weights that vary with the spatial distance
 {from: salience_map, to: salience_map, weight: [-1, -.5], from_dims: [1,2], to_dims: [1,2], directives: others},
]


